#include <bits/stdc++.h>

using namespace std;

map<string, char> mp;

void createMap(int lg) {
    auto start = chrono::steady_clock::now();
    mp["R"] = 'R';
    mp["G"] = 'G';
    mp["B"] = 'B';
    vector<string> mapKey = {}, newMapKey = {};

    for (int l = 2; l <= lg; l++) {
        mapKey = {}, newMapKey = {};
        for (auto i : mp)
            mapKey.emplace_back(i.first);
        for (auto i : mapKey)
            newMapKey.insert(newMapKey.end(), {(i + "R"), (i + "G"), (i + "B")});
        for (string elem : newMapKey) {
            string one, two;
            for (size_t i = 0; i < elem.size() - 1; i++)
                one += elem[i];
            for (size_t i = 1; i < elem.size(); i++)
                two += elem[i];
            if (mp.at(one) == mp.at(two)) mp[elem] = mp.at(one);
            else
                mp[elem] = 219 - mp.at(one) - mp.at(two);
        }
        for (auto i : mapKey)
            mp.erase(i);
    }
    auto end = chrono::steady_clock::now();
    cout << "Created Map in " << chrono::duration_cast<chrono::milliseconds>(end - start).count() << " ms\n";
    // cout << mp.size() << "\n";

    // for (auto i : mp)
    //     cout << i.first << "   " << i.second << "\n";

    return;
}

char triangle(const string &row) {
    string str = row, logstr;
    size_t sz = row.length(), lg = 10;
    cout << "Length of row " << sz << "\n";

    if (mp.empty()) createMap(lg);
    auto start = chrono::steady_clock::now();

    if (sz > 10000) {
        while (sz >= lg) {
            for (size_t i = 0; i < sz - (lg - 1); i++) {
                logstr = {};
                for (size_t j = i; j < i + lg; j++)
                    logstr += str[j];
                str[i] = mp[logstr];
            }
            sz -= (lg - 1);
        }
    }

    for (size_t length = sz; length > 1; length--) {
        for (size_t i = 0; i <= length - 2; i++) {
            if (str[i] == str[i + 1]) continue;
            str[i] = 219 - str[i] - str[i + 1];
        }
    }

    auto end = chrono::steady_clock::now();
    cout << "Result Caculated in " << chrono::duration_cast<chrono::microseconds>(end - start).count() << " micros\n";
    // cout << row << "-->" << str[0] << "\n";

    return str[0];
}

int main() {
    cout << triangle("RBGGRBGBRRRRRGGRRGGGGBGGGBGGBGRBBRGGRRBRGBRBBBRRGBGRGBBBGBGGRGGBBRBBRGRBGBGGGBBBBRRRRRGBBRBRRRRBGBRGGRGRBGBGRGGBGRGBRRBRRBRRBGRRGRRBGBRBRBRBGBBBBRRRRBGGBBGGRBRBRGBRRRBGRBRGBBBRGBRBBRGGBGBRRRRBGGBBGGGBGBGRGRGRRBRBBGRBBGRGBBRGRBRBGBBBGGRRBBGGBBRBGBGBGBRRGGGBGBBBGBGBGBRBGBRRBRBRRGBGBRRGGGGBBGGGGRGRRBBBBBRGRRGBRBGRBGGGGRGRBGGGBRBBRGBBGRGGGGRBRBRBGRGBRGRGBRRGRBBBRBBGRGRBBGRRGRBBRBRBGRRGRRRBRBGRBRBRBBRGGRBRGRRRBGBGGRBBGBBGRRGRGRGGRGRBBRBGRRGRGGGGGGGBGRRGRBRBRGGGRBGRRRGGBGGRBRBGBRRRRBRGBRGRBBBBBRBRGGGRBRBBGGRRBGBRGBBGRGBRGGBBGBBBGGGGBRGGBBBGGGBRGBBBRGBBBBGGGGRGRBBBBGGBRGGBRGBBRBGGRGGRGRGRGRBBBBRRRBRGRGRGGGGGRBGBGRBRRBGRRRBBRRRRRRGGBGBGBGBGBGRGGRBRBRRBGRRGGRBBGRRGRGBRBBBGGBRRRRRRGGGRRGRGGBGRGGGBRGRRBRBRRRGGGRBRBRGBGGGRBBGGBRRBRGBBGRRBGBGBBRRRGBBRGGGRGRGRGBRGBRGRRGRBGBBGRRGBBGBRRGBGBGBGGRRGRRGBGRBRRGRRGGRGRGRRBBRBRRGBRBRRBRBBGBBGGBBRBRRBGRGGRBGGBBBBRRRBRGGBRBRGGRRGGRBRRGGGRRBBRGBRBBGRGRRBBRGBGGRBBBRRRBGGRGRRRRBBGRGBRGGGBGRGRGGRBBGBBRBBBBRBGBRBRGGBBGRGBRRBGRRRRBGBRRBBRBGBBBGRRRBRGBBGRRGRGBGGBRGBGRGRRRBRGGGGBGBGGBBBRRRBRGGBRRGGRRGGBBBRRGBRBBGGBRGRGGRBGGGGGGRRBRGBBGBRRRGBBBGBBRRRGRRRGBBRGRRRGBRGGRBGRRGGBRGBRGRBGGRBRBRBRGBGGRRBBBGRBBGGRBGRGBGBRGRGGRRRBRGGGRRGBBGBRGGRRRBBRRBRBBBGGBGGRGBBGRRRGBRGRRBGGGGGBGBBGGGBGBGGRGGBBGRGGGBGBBGRGBBGGGGRRBRGBBRGGGRRRGBBRGGBGBGRBRBRBGGBRRBGRBBGGBRGGBGBBRGGBBGBGGGRRBRGBBBBBGBRGBRRGGBRGGGBBRGRBBRRRGGBBGRGRBRGBRBRBGBGRRGBBBRGRGBRBRRGBGGRGGBRBBGGRRRGGGGRBGBBBGBRBBBBGRBBGBGRGRRBGRBBBRGGRRRRRRRRRRBGRBBRBRGRRGRGRBGBGBGGGBGBRRBRRBBGBBBGRBBGGRRGBBGGRRBGBBGBBGRRRRBRRRBGBBRRBRBBBRGBGGGGGRBGGRBBGBRBBBRBBRBGGGBGRGBBRRGBBRGRGGRBRRBRGBBRRGRGGRRBGBBGRRGBBRGRGGGBRRBBGBRGRGGBGBBBGGBBRRRBGGRRRBBGGBRBGGGRBBRBGRGRBGGBRGBGRGBGRBRGBRGRBRRRBGBBGGBGRRGRBRBRGBRRBRGGGRGBGRBRGBBRGRGGGRBBBRRGBRGGGGRRBRRRRRGBBBBRBGRGRRRBRBRGBRRBBGRGGRBGRRRRRRGRBGBBBRGRBRGRGBBRGBBBRGGRBBRRBGRBGRBGGGGGBGBRRGRGGRGBGBBBGRBGRRRGGBBBBGGGBGRRRGGRBRBRBBBGRBBRRRBBRGBBGRGRGGBRRRRBBBRGBRRRGBGGRGGGRRRGRBRRGBRBRRGBRBBGGRBBRRGGBBBRBRBBRRBGRRGGGRGBRGGGGRRBGBRGGRBRRGGRRGRRBGBRBBRRRGGBBRBGBRBBRGBRRGBGRRRRBBGBGBRBGBBGBGBRGBBBGBRBGRGBRGBRGRRRRRRBBRGRGRRRRRBGBBRGRBRGGRGRBBGBBBGRBRRRRGGRBRBBRGGGGBRRGBGRRRBRBBRBBGRGRGBRBBRRGBBBBRRRRBRRBGGBRBGRGGGBRBRBBRRRRRRBRGRGGGRGBBGRGRBRBRRRRGBBBRRBRGGGRBGGBGRGGBRBRBGRRBRGRGGBBBGRRRBRGGBRRRBGRRGRBRGGBBBBGGBRRGGGGBBRRBGGRGBRGGGBGBRRBRRRGBBRRRGRBGRGGBBGGBBRBRBRRBBRRBRBRRBRGGRGBBBGBBBRBGRGBGBRGBGBBBBBRBRGRBRGGRBGRRBRBBBBGBRRGGBGGBGGGBBGBRBGGRBGRGRRGBRRGRGGBGBGRBRGBRBGGRBRRGBGRBBGBRBGGRBBGRRGBRBGGRRRRBGGGGRGGBBRBRRBRBGBRBGRRBBBBBRRGBBRGBGBBBGRBGBRGRRBBBRRGRBGBGGBGGBRRGBRGGRRBRRBGGBRGBGRBGGBRRGGGGGBBBBGGGBBGGGRBRGGBRGBRBBGRGRGBBRRBRGGGGRGBBBBBGGGBBGRBRGBBBRBRGRRBGBGRBRRBBBGRRGRRRRBBRBGBRRRGRGGRRRGGGBRRBRGGGRGBRBGGGRBRGBBBRGRGGGBBRRRGRRBBRGBGRRRRRBRBGBBRGRGRGGGRGBGBBGBBBGBGBRGRBBRGBRGGRRBRGGGRRRRGGBGGBRBBRRBRRGBRGGGBBGRRBGGGGBBRBGGBBGGRBRGRGGRRBBRGGRRGBGRGGRBGBRRBBGBBBRBGGRBBBRRGGRGRRGBGRGBBGRGBGRGRBGBGGGRGBGRRBBGBGRGGGRRGGBRBGBRRRRBBRRGBBGRGGGBRRRGBBRGRBBGRGBGBBGGBGRBGBRRBBBBBGRRGRGBGGRGBRRRRBBRGBRBRRBRGRBRBRGRBRRRGBGGBBGRBGBRGBBBGRBBRGRRRBGBBGBGGGBBGBBRRGBBBGBRBGBBGBRGGGGGGRBBGRGRBBBBGGBRBGRBGBBRRRBBBRGRRGRBGBRRGBRGRRGRBBRRBRGRGRRRRBBGGRGRBGGBRBRGRGGBGBGBRBRBRRBGRBRBBBRRRGBGGRRGBBGGGRGBBGGRRBRGGGRBRRBGRGRGGRRRBBBBBGGBRRGGRGBGBGRBBRRBGRGRGBBRBBBBGBGBRBRRRRBRGGBGGRGGGRBBRBGBBRGGRGRRGGGRGGRGBGRGGGRRRRBRBGRGBBBRGRGGBBGGGGRGRRGBBGRBGRGGBBRBGGBGBGBBBRGRBGRRBGRBBRBGRRRBBGGGBBRRRBBBRRGGBGBGRBGBRRGGGBGGGRGGRBGGBRGRGRBRGGBGGGBBBRGBRRGBGRRBRRGRRBGRRGGBRGBBRGBRBRRRGBRRRGRRBGGBGRRGGBBGGGGBRGBRBRBGRBBRGBBRRRGGRGGBRGGBRRGRBGGBBRGBRGRGRBBGGRBGBGBGBRRBGBRGGBGGRRGRGBRBBRRGGRBRBGGBBRRBRRGGRRRGRBBBGRGRRGBGBBRGGGBBGBBGRRRGRGRGRRGBGBRBGRGRRGRBRBGRBGBBGRGBGGGRBBBGBBRRBBBBGBRBBGRGGBGRBRRBBBBBRBRBGBGBGRBRRBRBBGRRRBRGBGGBGGGBRRGGBBGGRGBRGRBRGRGBRBGRGBRRRRBGRGBRGBBRGBRBBGRBBGBRGRGRRGRGBRBBBBRGGRGBRBBRGRBRBBGGRRBRBBGBRGBBGRGRGRGBRGBGGRRGBBRRRBGBBGBRBBRGRBBBBRGGGRBRRRBGBRGRBRRBGBRGBGRRRBBRRRGBBBRRRRGGRRGBGBBBRRGBGBRBBBRGGBRRBGRRBBGBRRBGRBBRBRRGRGRGGGBBGBBGGGGRGRRGGRRBRBRRRGGBBRRRGBGBBGRGBBBGRRRBGGBGRBBGRBGRBGGRGBRGBGRBRBGBBGGGBRRRRBBGGGGRRGGBRBGRRGRBRGGGBBBBGRBBGGGBRRGGGRGRRBRRRRRGGGRGBGRGGRRBRBRRRGBGBRGBBBGRRGRBGRGGGBBGRRRRRRGGBGBBBBBBBRGBRGBGBGRGRRBRRRBGBGRGBGGGRGBBBRBBBBGGRGBGBBBGRGBBBRGBGRGBBGBGGGBRGGBGGBRRBRGRGBRBRGBBBGGBRGBGRGRBRRGGBBRBBGRGRRGRRRRRBGGBBRGRBBRBBGBRRBRRRGBBBRRRBGBBRRGGRRBRRBRRRBGBGBBRGBRRGRBRBGBRGGGBBRRRRRGGGBRRBGRRRGGBRGRBBBRGGBGGBGGRBRBRGBGRGBGBGRBGGRGGBBBBGRGBBBBGGGBRBGRRRBBGRRRGRBBRGBBBRRBBGBGRRGRBBRRRGRRGGRRGBRBGGGBGRGGGRRGBBGBBBRBRBBBRRRBRGGBBRGGRBRGGGRRRBBBBRBRRRRRGRBGRGGRBRBBGBBBRRRGRRGRRGRGBGBRBGBBRGRRGBBBRBGGRBRRRGRGRGRRBBRGBGBRRRBGGGRBRBBBGGRBBGGBBBRGBRRBGRRRGRGRBBBBGRBGBRRBBBBBBBRBRGBBGBBRGRGRRBRBBRGBRGGRBRBBBGGRBGRGGRRBBGRBGGBGGRRBRGRRGBBBGGBGBRRBGRGGBBRBRGRRBBBBRBBRBBBBGBRGRRRBGBRBBGGRBBRBGRBBRRBGBBRRGRBGGBGRBGBBGGGGGGGBRGBRGGGGGBBRRBGBBRBBBRBGGRRRRGRRRRGGRGRGRRGGRGRBBGBGBBRGBGBRBRGGRRRGBRRRGGBGBRGGBGGGRBRGRRGRGRGBGBGGRGGRRGBGBGBGRGRRRGBGBGRRBBBGBRBGBGGRRRGBBGGBGBRGRRGRBBRBGGRGBRBBBGRBBBBGRGGGRBGBRRBBBGBGRBRBRRBBGRRGBBRGRBRBBGGRBGRBRBGRBGGBRRBGGRRRRGBGGRRGGBGBGGGBRRRBBGBRBBGRRBBRGGGBGRRGBGGGBBBRRBBRGBRRGBBGBGBRRBBRRRBRBRRBRBBRGBGRGBRGBBRGGRBRRBGRGRRRGRRGBBRGRGGBBRRGRBRBRBRRRGRGBGGRBGGBBBBBGRGRGRBBBBBBRBRRGGBRBRGBRBRRBBBGRGBBBBGGGGGGGGBBBGRRRGBGGBGGBGRRRBBRGGGGRGRGBRGRBGRRRRBGGRBGGRGGBGGGRGRGBGGBRGBBGBRBGBGGRRBRRRGBBBBRGRGRBRBRGRBGRGRGRGBBBBBRBGRBRBBBRGBBBRBBRRRRBGBRRBBBGBRRRRRGGRRGGGGBGGGBGGBGRBBRGGRRBRGBRBBBRRGBGRGBBBGBGGRGGBBRBBRGRBGBGGGBBBBRRRRRGBBRBRRRRBGBRGGRGRBGBGRGGBGRGBRRBRRBRRBGRRGRRBGBRBRBRBGBBBBRRRRBGGBBGGRBRBRGBRRRBGRBRGBBBRGBRBBRGGBGBRRRRBGGBBGGGBGBGRGRGRRBRBBGRBBGRGBBRGRBRBGBBBGGRRBBGGBBRBGBGBGBRRGGGBGBBBGBGBGBRBGBRRBRBRRGBGBRRGGGGBBGGGGRGRRBBBBBRGRRGBRBGRBGGGGRGRBGGGBRBBRGBBGRGGGGRBRBRBGRGBRGRGBRRGRBBBRBBGRGRBBGRRGRBBRBRBGRRGRRRBRBGRBRBRBBRGGRBRGRRRBGBGGRBBGBBGRRGRGRGGRGRBBRBGRRGRGGGGGGGBGRRGRBRBRGGGRBGRRRGGBGGRBRBGBRRRRBRGBRGRBBBBBRBRGGGRBRBBGGRRBGBRGBBGRGBRGGBBGBBBGGGGBRGGBBBGGGBRGBBBRGBBBBGGGGRGRBBBBGGBRGGBRGBBRBGGRGGRGRGRGRBBBBRRRBRGRGRGGGGGRBGBGRBRRBGRRRBBRRRRRRGGBGBGBGBGBGRGGRBRBRRBGRRGGRBBGRRGRGBRBBBGGBRRRRRRGGGRRGRGGBGRGGGBRGRRBRBRRRGGGRBRBRGBGGGRBBGGBRRBRGBBGRRBGBGBBRRRGBBRGGGRGRGRGBRGBRGRRGRBGBBGRRGBBGBRRGBGBGBGGRRGRRGBGRBRRGRRGGRGRGRRBBRBRRGBRBRRBRBBGBBGGBBRBRRBGRGGRBGGBBBBRRRBRGGBRBRGGRRGGRBRRGGGRRBBRGBRBBGRGRRBBRGBGGRBBBRRRBGGRGRRRRBBGRGBRGGGBGRGRGGRBBGBBRBBBBRBGBRBRGGBBGRGBRRBGRRRRBGBRRBBRBGBBBGRRRBRGBBGRRGRGBGGBRGBGRGRRRBRGGGGBGBGGBBBRRRBRGGBRRGGRRGGBBBRRGBRBBGGBRGRGGRBGGGGGGRRBRGBBGBRRRGBBBGBBRRRGRRRGBBRGRRRGBRGGRBGRRGGBRGBRGRBGGRBRBRBRGBGGRRBBBGRBBGGRBGRGBGBRGRGGRRRBRGGGRRGBBGBRGGRRRBBRRBRBBBGGBGGRGBBGRRRGBRGRRBGGGGGBGBBGGGBGBGGRGGBBGRGGGBGBBGRGBBGGGGRRBRGBBRGGGRRRGBBRGGBGBGRBRBRBGGBRRBGRBBGGBRGGBGBBRGGBBGBGGGRRBRGBBBBBGBRGBRRGGBRGGGBBRGRBBRRRGGBBGRGRBRGBRBRBGBGRRGBBBRGRGBRBRRGBGGRGGBRBBGGRRRGGGGRBGBBBGBRBBBBGRBBGBGRGRRBGRBBBRGGRRRRRRRRRRBGRBBRBRGRRGRGRBGBGBGGGBGBRRBRRBBGBBBGRBBGGRRGBBGGRRBGBBGBBGRRRRBRRRBGBBRRBRBBBRGBGGGGGRBGGRBBGBRBBBRBBRBGGGBGRGBBRRGBBRGRGGRBRRBRGBBRRGRGGRRBGBBGRRGBBRGRGGGBRRBBGBRGRGGBGBBBGGBBRRRBGGRRRBBGGBRBGGGRBBRBGRGRBGGBRGBGRGBGRBRGBRGRBRRRBGBBGGBGRRGRBRBRGBRRBRGGGRGBGRBRGBBRGRGGGRBBBRRGBRGGGGRRBRRRRRGBBBBRBGRGRRRBRBRGBRRBBGRGGRBGRRRRRRGRBGBBBRGRBRGRGBBRGBBBRGGRBBRRBGRBGRBGGGGGBGBRRGRGGRGBGBBBGRBGRRRGGBBBBGGGBGRRRGGRBRBRBBBGRBBRRRBBRGBBGRGRGGBRRRRBBBRGBRRRGBGGRGGGRRRGRBRRGBRBRRGBRBBGGRBBRRGGBBBRBRBBRRBGRRGGGRGBRGGGGRRBGBRGGRBRRGGRRGRRBGBRBBRRRGGBBRBGBRBBRGBRRGBGRRRRBBGBGBRBGBBGBGBRGBBBGBRBGRGBRGBRGRRRRRRBBRGRGRRRRRBGBBRGRBRGGRGRBBGBBBGRBRRRRGGRBRBBRGGGGBRRGBGRRRBRBBRBBGRGRGBRBBRRGBBBBRRRRBRRBGGBRBGRGGGBRBRBBRRRRRRBRGRGGGRGBBGRGRBRBRRRRGBBBRRBRGGGRBGGBGRGGBRBRBGRRBRGRGGBBBGRRRBRGGBRRRBGRRGRBRGGBBBBGGBRRGGGGBBRRBGGRGBRGGGBGBRRBRRRGBBRRRGRBGRGGBBGGBBRBRBRRBBRRBRBRRBRGGRGBBBGBBBRBGRGBGBRGBGBBBBBRBRGRBRGGRBGRRBRBBBBGBRRGGBGGBGGGBBGBRBGGRBGRGRRGBRRGRGGBGBGRBRGBRBGGRBRRGBGRBBGBRBGGRBBGRRGBRBGGRRRRBGGGGRGGBBRBRRBRBGBRBGRRBBBBBRRGBBRGBGBBBGRBGBRGRRBBBRRGRBGBGGBGGBRRGBRGGRRBRRBGGBRGBGRBGGBRRGGGGGBBBBGGGBBGGGRBRGGBRGBRBBGRGRGBBRRBRGGGGRGBBBBBGGGBBGRBRGBBBRBRGRRBGBGRBRRBBBGRRGRRRRBBRBGBRRRGRGGRRRGGGBRRBRGGGRGBRBGGGRBRGBBBRGRGGGBBRRRGRRBBRGBGRRRRRBRBGBBRGRGRGGGRGBGBBGBBBGBGBRGRBBRGBRGGRRBRGGGRRRRGGBGGBRBBRRBRRGBRGGGBBGRRBGGGGBBRBGGBBGGRBRGRGGRRBBRGGRRGBGRGGRBGBRRBBGBBBRBGGRBBBRRGGRGRRGBGRGBBGRGBGRGRBGBGGGRGBGRRBBGBGRGGGRRGGBRBGBRRRRBBRRGBBGRGGGBRRRGBBRGRBBGRGBGBBGGBGRBGBRRBBBBBGRRGRGBGGRGBRRRRBBRGBRBRRBRGRBRBRGRBRRRGBGGBBGRBGBRGBBBGRBBRGRRRBGBBGBGGGBBGBBRRGBBBGBRBGBBGBRGGGGGGRBBGRGRBBBBGGBRBGRBGBBRRRBBBRGRRGRBGBRRGBRGRRGRBBRRBRGRGRRRRBBGGRGRBGGBRBRGRGGBGBGBRBRBRRBGRBRBBBRRRGBGGRRGBBGGGRGBBGGRRBRGGGRBRRBGRGRGGRRRBBBBBGGBRRGGRGBGBGRBBRRBGRGRGBBRBBBBGBGBRBRRRRBRGGBGGRGGGRBBRBGBBRGGRGRRGGGRGGRGBGRGGGRRRRBRBGRGBBBRGRGGBBGGGGRGRRGBBGRBGRGGBBRBGGBGBGBBBRGRBGRRBGRBBRBGRRRBBGGGBBRRRBBBRRGGBGBGRBGBRRGGGBGGGRGGRBGGBRGRGRBRGGBGGGBBBRGBRRGBGRRBRRGRRBGRRGGBRGBBRGBRBRRRGBRRRGRRBGGBGRRGGBBGGGGBRGBRBRBGRBBRGBBRRRGGRGGBRGGBRRGRBGGBBRGBRGRGRBBGGRBGBGBGBRRBGBRGGBGGRRGRGBRBBRRGGRBRBGGBBRRBRRGGRRRGRBBBGRGRRGBGBBRGGGBBGBBGRRRGRGRGRRGBGBRBGRGRRGRBRBGRBGBBGRGBGGGRBBBGBBRRBBBBGBRBBGRGGBGRBRRBBBBBRBRBGBGBGRBRRBRBBGRRRBRGBGGBGGGBRRGGBBGGRGBRGRBRGRGBRBGRGBRRRRBGRGBRGBBRGBRBBGRBBGBRGRGRRGRGBRBBBBRGGRGBRBBRGRBRBBGGRRBRBBGBRGBBGRGRGRGBRGBGGRRGBBRRRBGBBGBRBBRGRBBBBRGGGRBRRRBGBRGRBRRBGBRGBGRRRBBRRRGBBBRRRRGGRRGBGBBBRRGBGBRBBBRGGBRRBGRRBBGBRRBGRBBRBRRGRGRGGGBBGBBGGGGRGRRGGRRBRBRRRGGBBRRRGBGBBGRGBBBGRRRBGGBGRBBGRBGRBGGRGBRGBGRBRBGBBGGGBRRRRBBGGGGRRGGBRBGRRGRBRGGGBBBBGRBBGGGBRRGGGRGRRBRRRRRGGGRGBGRGGRRBRBRRRGBGBRGBBBGRRGRBGRGGGBBGRRRRRRGGBGBBBBBBBRGBRGBGBGRGRRBRRRBGBGRGBGGGRGBBBRBBBBGGRGBGBBBGRGBBBRGBGRGBBGBGGGBRGGBGGBRRBRGRGBRBRGBBBGGBRGBGRGRBRRGGBBRBBGRGRRGRRRRRBGGBBRGRBBRBBGBRRBRRRGBBBRRRBGBBRRGGRRBRRBRRRBGBGBBRGBRRGRBRBGBRGGGBBRRRRRGGGBRRBGRRRGGBRGRBBBRGGBGGBGGRBRBRGBGRGBGBGRBGGRGGBBBBGRGBBBBGGGBRBGRRRBBGRRRGRBBRGBBBRRBBGBGRRGRBBRRRGRRGGRRGBRBGGGBGRGGGRRGBBGBBBRBRBBBRRRBRGGBBRGGRBRGGGRRRBBBBRBRRRRRGRBGRGGRBRBBGBBBRRRGRRGRRGRGBGBRBGBBRGRRGBBBRBGGRBRRRGRGRGRRBBR");
    return 0;
}