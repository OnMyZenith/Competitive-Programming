#include <bits/stdc++.h>

using namespace std;

template <class Fun>
class y_combinator_result {
    Fun fun_;
public:
    template <class T> explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}
    template <class... Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }
};
template <class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }

#include <bits/extc++.h>
using namespace __gnu_pbds;

struct splitmix64_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
    size_t operator()(pair<uint64_t, uint64_t> x) const {
        static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x.first + FIXED_RANDOM) ^ splitmix64(x.second ^ FIXED_RANDOM);
    }
};

template <class T, class U, typename Hash = splitmix64_hash> using hash_map = gp_hash_table<T, U, Hash>;
template <class T, typename Hash = splitmix64_hash> using hash_set = hash_map<T, null_type, Hash>;


char triangle(const string &row) {
    auto ans2 = [](const char &a, const char &b) -> char {
        if (a == b) return a;
        for (const char &c: {'R', 'B'}) {
            if (c != a && c != b) return c;
        }
        return 'G';
    };
    hash_map<pair<int, int>, char> mp;
    auto solve = y_combinator([&](auto self, int l, int r) -> char {
        assert(l <= r);
        if (l == r) return row[l];
        if (l + 1 == r) return ans2(row[l], row[r]);

        auto it = mp.find({l, r});
        if (it != mp.end()) return it->second;

        char res = ans2(self(l, r - 1), self(l + 1, r));
        mp[{l, r}] = res;
        cerr << l << " " << r << '\n';
        return res;
    });
    return solve(0, (int)row.size() - 1);
}

int main() {
    // cout << triangle("RBGGRBGBRRRRRGGRRGGGGBGGGBGGBGRBBRGGRRBRGBRBBBRRGBGRGBBBGBGGRGGBBRBBRGRBGBGGGBBBBRRRRRGBBRBRRRRBGBRGGRGRBGBGRGGBGRGBRRBRRBRRBGRRGRRBGBRBRBRBGBBBBRRRRBGGBBGGRBRBRGBRRRBGRBRGBBBRGBRBBRGGBGBRRRRBGGBBGGGBGBGRGRGRRBRBBGRBBGRGBBRGRBRBGBBBGGRRBBGGBBRBGBGBGBRRGGGBGBBBGBGBGBRBGBRRBRBRRGBGBRRGGGGBBGGGGRGRRBBBBBRGRRGBRBGRBGGGGRGRBGGGBRBBRGBBGRGGGGRBRBRBGRGBRGRGBRRGRBBBRBBGRGRBBGRRGRBBRBRBGRRGRRRBRBGRBRBRBBRGGRBRGRRRBGBGGRBBGBBGRRGRGRGGRGRBBRBGRRGRGGGGGGGBGRRGRBRBRGGGRBGRRRGGBGGRBRBGBRRRRBRGBRGRBBBBBRBRGGGRBRBBGGRRBGBRGBBGRGBRGGBBGBBBGGGGBRGGBBBGGGBRGBBBRGBBBBGGGGRGRBBBBGGBRGGBRGBBRBGGRGGRGRGRGRBBBBRRRBRGRGRGGGGGRBGBGRBRRBGRRRBBRRRRRRGGBGBGBGBGBGRGGRBRBRRBGRRGGRBBGRRGRGBRBBBGGBRRRRRRGGGRRGRGGBGRGGGBRGRRBRBRRRGGGRBRBRGBGGGRBBGGBRRBRGBBGRRBGBGBBRRRGBBRGGGRGRGRGBRGBRGRRGRBGBBGRRGBBGBRRGBGBGBGGRRGRRGBGRBRRGRRGGRGRGRRBBRBRRGBRBRRBRBBGBBGGBBRBRRBGRGGRBGGBBBBRRRBRGGBRBRGGRRGGRBRRGGGRRBBRGBRBBGRGRRBBRGBGGRBBBRRRBGGRGRRRRBBGRGBRGGGBGRGRGGRBBGBBRBBBBRBGBRBRGGBBGRGBRRBGRRRRBGBRRBBRBGBBBGRRRBRGBBGRRGRGBGGBRGBGRGRRRBRGGGGBGBGGBBBRRRBRGGBRRGGRRGGBBBRRGBRBBGGBRGRGGRBGGGGGGRRBRGBBGBRRRGBBBGBBRRRGRRRGBBRGRRRGBRGGRBGRRGGBRGBRGRBGGRBRBRBRGBGGRRBBBGRBBGGRBGRGBGBRGRGGRRRBRGGGRRGBBGBRGGRRRBBRRBRBBBGGBGGRGBBGRRRGBRGRRBGGGGGBGBBGGGBGBGGRGGBBGRGGGBGBBGRGBBGGGGRRBRGBBRGGGRRRGBBRGGBGBGRBRBRBGGBRRBGRBBGGBRGGBGBBRGGBBGBGGGRRBRGBBBBBGBRGBRRGGBRGGGBBRGRBBRRRGGBBGRGRBRGBRBRBGBGRRGBBBRGRGBRBRRGBGGRGGBRBBGGRRRGGGGRBGBBBGBRBBBBGRBBGBGRGRRBGRBBBRGGRRRRRRRRRRBGRBBRBRGRRGRGRBGBGBGGGBGBRRBRRBBGBBBGRBBGGRRGBBGGRRBGBBGBBGRRRRBRRRBGBBRRBRBBBRGBGGGGGRBGGRBBGBRBBBRBBRBGGGBGRGBBRRGBBRGRGGRBRRBRGBBRRGRGGRRBGBBGRRGBBRGRGGGBRRBBGBRGRGGBGBBBGGBBRRRBGGRRRBBGGBRBGGGRBBRBGRGRBGGBRGBGRGBGRBRGBRGRBRRRBGBBGGBGRRGRBRBRGBRRBRGGGRGBGRBRGBBRGRGGGRBBBRRGBRGGGGRRBRRRRRGBBBBRBGRGRRRBRBRGBRRBBGRGGRBGRRRRRRGRBGBBBRGRBRGRGBBRGBBBRGGRBBRRBGRBGRBGGGGGBGBRRGRGGRGBGBBBGRBGRRRGGBBBBGGGBGRRRGGRBRBRBBBGRBBRRRBBRGBBGRGRGGBRRRRBBBRGBRRRGBGGRGGGRRRGRBRRGBRBRRGBRBBGGRBBRRGGBBBRBRBBRRBGRRGGGRGBRGGGGRRBGBRGGRBRRGGRRGRRBGBRBBRRRGGBBRBGBRBBRGBRRGBGRRRRBBGBGBRBGBBGBGBRGBBBGBRBGRGBRGBRGRRRRRRBBRGRGRRRRRBGBBRGRBRGGRGRBBGBBBGRBRRRRGGRBRBBRGGGGBRRGBGRRRBRBBRBBGRGRGBRBBRRGBBBBRRRRBRRBGGBRBGRGGGBRBRBBRRRRRRBRGRGGGRGBBGRGRBRBRRRRGBBBRRBRGGGRBGGBGRGGBRBRBGRRBRGRGGBBBGRRRBRGGBRRRBGRRGRBRGGBBBBGGBRRGGGGBBRRBGGRGBRGGGBGBRRBRRRGBBRRRGRBGRGGBBGGBBRBRBRRBBRRBRBRRBRGGRGBBBGBBBRBGRGBGBRGBGBBBBBRBRGRBRGGRBGRRBRBBBBGBRRGGBGGBGGGBBGBRBGGRBGRGRRGBRRGRGGBGBGRBRGBRBGGRBRRGBGRBBGBRBGGRBBGRRGBRBGGRRRRBGGGGRGGBBRBRRBRBGBRBGRRBBBBBRRGBBRGBGBBBGRBGBRGRRBBBRRGRBGBGGBGGBRRGBRGGRRBRRBGGBRGBGRBGGBRRGGGGGBBBBGGGBBGGGRBRGGBRGBRBBGRGRGBBRRBRGGGGRGBBBBBGGGBBGRBRGBBBRBRGRRBGBGRBRRBBBGRRGRRRRBBRBGBRRRGRGGRRRGGGBRRBRGGGRGBRBGGGRBRGBBBRGRGGGBBRRRGRRBBRGBGRRRRRBRBGBBRGRGRGGGRGBGBBGBBBGBGBRGRBBRGBRGGRRBRGGGRRRRGGBGGBRBBRRBRRGBRGGGBBGRRBGGGGBBRBGGBBGGRBRGRGGRRBBRGGRRGBGRGGRBGBRRBBGBBBRBGGRBBBRRGGRGRRGBGRGBBGRGBGRGRBGBGGGRGBGRRBBGBGRGGGRRGGBRBGBRRRRBBRRGBBGRGGGBRRRGBBRGRBBGRGBGBBGGBGRBGBRRBBBBBGRRGRGBGGRGBRRRRBBRGBRBRRBRGRBRBRGRBRRRGBGGBBGRBGBRGBBBGRBBRGRRRBGBBGBGGGBBGBBRRGBBBGBRBGBBGBRGGGGGGRBBGRGRBBBBGGBRBGRBGBBRRRBBBRGRRGRBGBRRGBRGRRGRBBRRBRGRGRRRRBBGGRGRBGGBRBRGRGGBGBGBRBRBRRBGRBRBBBRRRGBGGRRGBBGGGRGBBGGRRBRGGGRBRRBGRGRGGRRRBBBBBGGBRRGGRGBGBGRBBRRBGRGRGBBRBBBBGBGBRBRRRRBRGGBGGRGGGRBBRBGBBRGGRGRRGGGRGGRGBGRGGGRRRRBRBGRGBBBRGRGGBBGGGGRGRRGBBGRBGRGGBBRBGGBGBGBBBRGRBGRRBGRBBRBGRRRBBGGGBBRRRBBBRRGGBGBGRBGBRRGGGBGGGRGGRBGGBRGRGRBRGGBGGGBBBRGBRRGBGRRBRRGRRBGRRGGBRGBBRGBRBRRRGBRRRGRRBGGBGRRGGBBGGGGBRGBRBRBGRBBRGBBRRRGGRGGBRGGBRRGRBGGBBRGBRGRGRBBGGRBGBGBGBRRBGBRGGBGGRRGRGBRBBRRGGRBRBGGBBRRBRRGGRRRGRBBBGRGRRGBGBBRGGGBBGBBGRRRGRGRGRRGBGBRBGRGRRGRBRBGRBGBBGRGBGGGRBBBGBBRRBBBBGBRBBGRGGBGRBRRBBBBBRBRBGBGBGRBRRBRBBGRRRBRGBGGBGGGBRRGGBBGGRGBRGRBRGRGBRBGRGBRRRRBGRGBRGBBRGBRBBGRBBGBRGRGRRGRGBRBBBBRGGRGBRBBRGRBRBBGGRRBRBBGBRGBBGRGRGRGBRGBGGRRGBBRRRBGBBGBRBBRGRBBBBRGGGRBRRRBGBRGRBRRBGBRGBGRRRBBRRRGBBBRRRRGGRRGBGBBBRRGBGBRBBBRGGBRRBGRRBBGBRRBGRBBRBRRGRGRGGGBBGBBGGGGRGRRGGRRBRBRRRGGBBRRRGBGBBGRGBBBGRRRBGGBGRBBGRBGRBGGRGBRGBGRBRBGBBGGGBRRRRBBGGGGRRGGBRBGRRGRBRGGGBBBBGRBBGGGBRRGGGRGRRBRRRRRGGGRGBGRGGRRBRBRRRGBGBRGBBBGRRGRBGRGGGBBGRRRRRRGGBGBBBBBBBRGBRGBGBGRGRRBRRRBGBGRGBGGGRGBBBRBBBBGGRGBGBBBGRGBBBRGBGRGBBGBGGGBRGGBGGBRRBRGRGBRBRGBBBGGBRGBGRGRBRRGGBBRBBGRGRRGRRRRRBGGBBRGRBBRBBGBRRBRRRGBBBRRRBGBBRRGGRRBRRBRRRBGBGBBRGBRRGRBRBGBRGGGBBRRRRRGGGBRRBGRRRGGBRGRBBBRGGBGGBGGRBRBRGBGRGBGBGRBGGRGGBBBBGRGBBBBGGGBRBGRRRBBGRRRGRBBRGBBBRRBBGBGRRGRBBRRRGRRGGRRGBRBGGGBGRGGGRRGBBGBBBRBRBBBRRRBRGGBBRGGRBRGGGRRRBBBBRBRRRRRGRBGRGGRBRBBGBBBRRRGRRGRRGRGBGBRBGBBRGRRGBBBRBGGRBRRRGRGRGRRBBRGBGBRRRBGGGRBRBBBGGRBBGGBBBRGBRRBGRRRGRGRBBBBGRBGBRRBBBBBBBRBRGBBGBBRGRGRRBRBBRGBRGGRBRBBBGGRBGRGGRRBBGRBGGBGGRRBRGRRGBBBGGBGBRRBGRGGBBRBRGRRBBBBRBBRBBBBGBRGRRRBGBRBBGGRBBRBGRBBRRBGBBRRGRBGGBGRBGBBGGGGGGGBRGBRGGGGGBBRRBGBBRBBBRBGGRRRRGRRRRGGRGRGRRGGRGRBBGBGBBRGBGBRBRGGRRRGBRRRGGBGBRGGBGGGRBRGRRGRGRGBGBGGRGGRRGBGBGBGRGRRRGBGBGRRBBBGBRBGBGGRRRGBBGGBGBRGRRGRBBRBGGRGBRBBBGRBBBBGRGGGRBGBRRBBBGBGRBRBRRBBGRRGBBRGRBRBBGGRBGRBRBGRBGGBRRBGGRRRRGBGGRRGGBGBGGGBRRRBBGBRBBGRRBBRGGGBGRRGBGGGBBBRRBBRGBRRGBBGBGBRRBBRRRBRBRRBRBBRGBGRGBRGBBRGGRBRRBGRGRRRGRRGBBRGRGGBBRRGRBRBRBRRRGRGBGGRBGGBBBBBGRGRGRBBBBBBRBRRGGBRBRGBRBRRBBBGRGBBBBGGGGGGGGBBBGRRRGBGGBGGBGRRRBBRGGGGRGRGBRGRBGRRRRBGGRBGGRGGBGGGRGRGBGGBRGBBGBRBGBGGRRBRRRGBBBBRGRGRBRBRGRBGRGRGRGBBBBBRBGRBRBBBRGBBBRBBRRRRBGBRRBBBGBRRRRRGGRRGGGGBGGGBGGBGRBBRGGRRBRGBRBBBRRGBGRGBBBGBGGRGGBBRBBRGRBGBGGGBBBBRRRRRGBBRBRRRRBGBRGGRGRBGBGRGGBGRGBRRBRRBRRBGRRGRRBGBRBRBRBGBBBBRRRRBGGBBGGRBRBRGBRRRBGRBRGBBBRGBRBBRGGBGBRRRRBGGBBGGGBGBGRGRGRRBRBBGRBBGRGBBRGRBRBGBBBGGRRBBGGBBRBGBGBGBRRGGGBGBBBGBGBGBRBGBRRBRBRRGBGBRRGGGGBBGGGGRGRRBBBBBRGRRGBRBGRBGGGGRGRBGGGBRBBRGBBGRGGGGRBRBRBGRGBRGRGBRRGRBBBRBBGRGRBBGRRGRBBRBRBGRRGRRRBRBGRBRBRBBRGGRBRGRRRBGBGGRBBGBBGRRGRGRGGRGRBBRBGRRGRGGGGGGGBGRRGRBRBRGGGRBGRRRGGBGGRBRBGBRRRRBRGBRGRBBBBBRBRGGGRBRBBGGRRBGBRGBBGRGBRGGBBGBBBGGGGBRGGBBBGGGBRGBBBRGBBBBGGGGRGRBBBBGGBRGGBRGBBRBGGRGGRGRGRGRBBBBRRRBRGRGRGGGGGRBGBGRBRRBGRRRBBRRRRRRGGBGBGBGBGBGRGGRBRBRRBGRRGGRBBGRRGRGBRBBBGGBRRRRRRGGGRRGRGGBGRGGGBRGRRBRBRRRGGGRBRBRGBGGGRBBGGBRRBRGBBGRRBGBGBBRRRGBBRGGGRGRGRGBRGBRGRRGRBGBBGRRGBBGBRRGBGBGBGGRRGRRGBGRBRRGRRGGRGRGRRBBRBRRGBRBRRBRBBGBBGGBBRBRRBGRGGRBGGBBBBRRRBRGGBRBRGGRRGGRBRRGGGRRBBRGBRBBGRGRRBBRGBGGRBBBRRRBGGRGRRRRBBGRGBRGGGBGRGRGGRBBGBBRBBBBRBGBRBRGGBBGRGBRRBGRRRRBGBRRBBRBGBBBGRRRBRGBBGRRGRGBGGBRGBGRGRRRBRGGGGBGBGGBBBRRRBRGGBRRGGRRGGBBBRRGBRBBGGBRGRGGRBGGGGGGRRBRGBBGBRRRGBBBGBBRRRGRRRGBBRGRRRGBRGGRBGRRGGBRGBRGRBGGRBRBRBRGBGGRRBBBGRBBGGRBGRGBGBRGRGGRRRBRGGGRRGBBGBRGGRRRBBRRBRBBBGGBGGRGBBGRRRGBRGRRBGGGGGBGBBGGGBGBGGRGGBBGRGGGBGBBGRGBBGGGGRRBRGBBRGGGRRRGBBRGGBGBGRBRBRBGGBRRBGRBBGGBRGGBGBBRGGBBGBGGGRRBRGBBBBBGBRGBRRGGBRGGGBBRGRBBRRRGGBBGRGRBRGBRBRBGBGRRGBBBRGRGBRBRRGBGGRGGBRBBGGRRRGGGGRBGBBBGBRBBBBGRBBGBGRGRRBGRBBBRGGRRRRRRRRRRBGRBBRBRGRRGRGRBGBGBGGGBGBRRBRRBBGBBBGRBBGGRRGBBGGRRBGBBGBBGRRRRBRRRBGBBRRBRBBBRGBGGGGGRBGGRBBGBRBBBRBBRBGGGBGRGBBRRGBBRGRGGRBRRBRGBBRRGRGGRRBGBBGRRGBBRGRGGGBRRBBGBRGRGGBGBBBGGBBRRRBGGRRRBBGGBRBGGGRBBRBGRGRBGGBRGBGRGBGRBRGBRGRBRRRBGBBGGBGRRGRBRBRGBRRBRGGGRGBGRBRGBBRGRGGGRBBBRRGBRGGGGRRBRRRRRGBBBBRBGRGRRRBRBRGBRRBBGRGGRBGRRRRRRGRBGBBBRGRBRGRGBBRGBBBRGGRBBRRBGRBGRBGGGGGBGBRRGRGGRGBGBBBGRBGRRRGGBBBBGGGBGRRRGGRBRBRBBBGRBBRRRBBRGBBGRGRGGBRRRRBBBRGBRRRGBGGRGGGRRRGRBRRGBRBRRGBRBBGGRBBRRGGBBBRBRBBRRBGRRGGGRGBRGGGGRRBGBRGGRBRRGGRRGRRBGBRBBRRRGGBBRBGBRBBRGBRRGBGRRRRBBGBGBRBGBBGBGBRGBBBGBRBGRGBRGBRGRRRRRRBBRGRGRRRRRBGBBRGRBRGGRGRBBGBBBGRBRRRRGGRBRBBRGGGGBRRGBGRRRBRBBRBBGRGRGBRBBRRGBBBBRRRRBRRBGGBRBGRGGGBRBRBBRRRRRRBRGRGGGRGBBGRGRBRBRRRRGBBBRRBRGGGRBGGBGRGGBRBRBGRRBRGRGGBBBGRRRBRGGBRRRBGRRGRBRGGBBBBGGBRRGGGGBBRRBGGRGBRGGGBGBRRBRRRGBBRRRGRBGRGGBBGGBBRBRBRRBBRRBRBRRBRGGRGBBBGBBBRBGRGBGBRGBGBBBBBRBRGRBRGGRBGRRBRBBBBGBRRGGBGGBGGGBBGBRBGGRBGRGRRGBRRGRGGBGBGRBRGBRBGGRBRRGBGRBBGBRBGGRBBGRRGBRBGGRRRRBGGGGRGGBBRBRRBRBGBRBGRRBBBBBRRGBBRGBGBBBGRBGBRGRRBBBRRGRBGBGGBGGBRRGBRGGRRBRRBGGBRGBGRBGGBRRGGGGGBBBBGGGBBGGGRBRGGBRGBRBBGRGRGBBRRBRGGGGRGBBBBBGGGBBGRBRGBBBRBRGRRBGBGRBRRBBBGRRGRRRRBBRBGBRRRGRGGRRRGGGBRRBRGGGRGBRBGGGRBRGBBBRGRGGGBBRRRGRRBBRGBGRRRRRBRBGBBRGRGRGGGRGBGBBGBBBGBGBRGRBBRGBRGGRRBRGGGRRRRGGBGGBRBBRRBRRGBRGGGBBGRRBGGGGBBRBGGBBGGRBRGRGGRRBBRGGRRGBGRGGRBGBRRBBGBBBRBGGRBBBRRGGRGRRGBGRGBBGRGBGRGRBGBGGGRGBGRRBBGBGRGGGRRGGBRBGBRRRRBBRRGBBGRGGGBRRRGBBRGRBBGRGBGBBGGBGRBGBRRBBBBBGRRGRGBGGRGBRRRRBBRGBRBRRBRGRBRBRGRBRRRGBGGBBGRBGBRGBBBGRBBRGRRRBGBBGBGGGBBGBBRRGBBBGBRBGBBGBRGGGGGGRBBGRGRBBBBGGBRBGRBGBBRRRBBBRGRRGRBGBRRGBRGRRGRBBRRBRGRGRRRRBBGGRGRBGGBRBRGRGGBGBGBRBRBRRBGRBRBBBRRRGBGGRRGBBGGGRGBBGGRRBRGGGRBRRBGRGRGGRRRBBBBBGGBRRGGRGBGBGRBBRRBGRGRGBBRBBBBGBGBRBRRRRBRGGBGGRGGGRBBRBGBBRGGRGRRGGGRGGRGBGRGGGRRRRBRBGRGBBBRGRGGBBGGGGRGRRGBBGRBGRGGBBRBGGBGBGBBBRGRBGRRBGRBBRBGRRRBBGGGBBRRRBBBRRGGBGBGRBGBRRGGGBGGGRGGRBGGBRGRGRBRGGBGGGBBBRGBRRGBGRRBRRGRRBGRRGGBRGBBRGBRBRRRGBRRRGRRBGGBGRRGGBBGGGGBRGBRBRBGRBBRGBBRRRGGRGGBRGGBRRGRBGGBBRGBRGRGRBBGGRBGBGBGBRRBGBRGGBGGRRGRGBRBBRRGGRBRBGGBBRRBRRGGRRRGRBBBGRGRRGBGBBRGGGBBGBBGRRRGRGRGRRGBGBRBGRGRRGRBRBGRBGBBGRGBGGGRBBBGBBRRBBBBGBRBBGRGGBGRBRRBBBBBRBRBGBGBGRBRRBRBBGRRRBRGBGGBGGGBRRGGBBGGRGBRGRBRGRGBRBGRGBRRRRBGRGBRGBBRGBRBBGRBBGBRGRGRRGRGBRBBBBRGGRGBRBBRGRBRBBGGRRBRBBGBRGBBGRGRGRGBRGBGGRRGBBRRRBGBBGBRBBRGRBBBBRGGGRBRRRBGBRGRBRRBGBRGBGRRRBBRRRGBBBRRRRGGRRGBGBBBRRGBGBRBBBRGGBRRBGRRBBGBRRBGRBBRBRRGRGRGGGBBGBBGGGGRGRRGGRRBRBRRRGGBBRRRGBGBBGRGBBBGRRRBGGBGRBBGRBGRBGGRGBRGBGRBRBGBBGGGBRRRRBBGGGGRRGGBRBGRRGRBRGGGBBBBGRBBGGGBRRGGGRGRRBRRRRRGGGRGBGRGGRRBRBRRRGBGBRGBBBGRRGRBGRGGGBBGRRRRRRGGBGBBBBBBBRGBRGBGBGRGRRBRRRBGBGRGBGGGRGBBBRBBBBGGRGBGBBBGRGBBBRGBGRGBBGBGGGBRGGBGGBRRBRGRGBRBRGBBBGGBRGBGRGRBRRGGBBRBBGRGRRGRRRRRBGGBBRGRBBRBBGBRRBRRRGBBBRRRBGBBRRGGRRBRRBRRRBGBGBBRGBRRGRBRBGBRGGGBBRRRRRGGGBRRBGRRRGGBRGRBBBRGGBGGBGGRBRBRGBGRGBGBGRBGGRGGBBBBGRGBBBBGGGBRBGRRRBBGRRRGRBBRGBBBRRBBGBGRRGRBBRRRGRRGGRRGBRBGGGBGRGGGRRGBBGBBBRBRBBBRRRBRGGBBRGGRBRGGGRRRBBBBRBRRRRRGRBGRGGRBRBBGBBBRRRGRRGRRGRGBGBRBGBBRGRRGBBBRBGGRBRRRGRGRGRRBBR");
    cout << triangle("B") << '\n';
    cout << triangle("GB") << '\n';
    cout << triangle("RRR") << '\n';
    cout << triangle("RGBG") << '\n';
    cout << triangle("RBRGBRB") << '\n';
    cout << triangle("RBRGBRBGGRRRBGBBBGG") << '\n';
    return 0;
}